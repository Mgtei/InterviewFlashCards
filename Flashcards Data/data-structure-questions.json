{
"data": [{
    "answer": "List \ninsertion: O(1) \ndeletion: O(n) \naccess: O(1) \n\nLinked Lists \ninsertion: O(1) \ndeletion: O(1) \naccess: O(n) ",
    "question": "What are the big O runtimes of insertion, deletion, and access in a list and a linked list?"
  },
  {
    "answer": "Pre Order(V L R): 20, 15, 5, 18, 17, 30, 25, 22, 27 \n\nPost Order(L R V): 5, 17, 18, 15, 22, 27, 25, 30, 20 \n\nIn Order(L V R): 5, 15,17, 18, 20, 22, 25, 27, 30",
    "question": "Given the following tree, what are the print orders for Pre Order, Post Order, and In Order traversal?",
    "question_url": "http://www.cs.wcupa.edu/rkline/assets/img/DS/bst2.png?1264796754"
  },
  {
    "answer": "You can handle collisions in a dictionary through bucketing or open addressing. Bucketing stores values hashed to the same index in another data structure located at that index, usually a linked list or array. Open addressing searches for the next open index to store the colliding object.",
    "question": "How do dictionaries(Hashtables) handle collisions?"
  },
  {
    "answer": "1. You would use a stack. Push the stops onto the stack starting from the last stop, making the top of the stack the next stop. Then just pop the stop off the stack once the train has arrived there. Insertion is O(1) and removal/deletion is O(1) \n\n2. A graph can be used for the subway system. The nodes would be stops and the nodes would reference which trains arrive there. The edges connecting the nodes would indicated that there is a path between those stations.",
    "question": "What data structure would you use to model the following scenarios: \n\n1. You have a list of subway stops for a train and want to remove the stop from your collection when the train has made that stop. \n\n2. What could you use to model a subways system map? \n"
  },
  {
    "answer": "Depth first search traverses to the bottom most adjacent node of a tree/graph before moving back up and to the next adjacent node. Breadth first search checks all adjacent nodes to the starting node before moving further down, then the process is repeated.",
    "question": "What is depth first search? Breadth first search?"
  },
  {
    "answer": "A cache is the temporary storage container for data that is locally stored for quicker access. A cache can be used to hold on to images for example that are frequented, this reduces the number of API calls and wait time. A cache can be implemented using dictionaries and arrays",
    "question": "What is a cache and what data structures would you most likely use to implement it?"
  }]
}
